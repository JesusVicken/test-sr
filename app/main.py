from fastapi import FastAPI, File, UploadFile, HTTPException
from app.services.mongo_service import save_to_mongo
from app.services.rabbitmq_service import send_to_rabbitmq
from app.services.mysql_service import save_to_mysql  # Importar o servi√ßo do MySQL
import logging
import json

logging.basicConfig(filename='app/logs/app.log', level=logging.INFO)
app = FastAPI()

@app.post("/upload/")
async def upload_file(file: UploadFile = File(...)):
    """ Endpoint para upload de arquivo JSON """
    try:
        if not file.filename.endswith(".json"):
            raise HTTPException(status_code=400, detail="‚ùå Apenas arquivos JSON s√£o permitidos!")

        contents = await file.read()
        if not contents:
            raise HTTPException(status_code=400, detail="‚ùå Arquivo JSON est√° vazio!")

        data = json.loads(contents)

        # üîπ Salvar no MongoDB
        mongo_id = save_to_mongo(data)
        if not mongo_id:
            raise HTTPException(status_code=500, detail="‚ùå Erro ao salvar no MongoDB!")

        # üîπ Salvar no MySQL
        save_to_mysql(data)  # Chamada para salvar no MySQL

        # üîπ Enviar ID para RabbitMQ
        send_to_rabbitmq(str(mongo_id))

        logging.info(f"‚úÖ Arquivo processado com sucesso. MongoDB ID: {mongo_id}")
        return {"message": "‚úÖ Upload realizado com sucesso", "id": str(mongo_id)}

    except json.JSONDecodeError as e:
        logging.error(f"‚ùå Arquivo JSON inv√°lido: {str(e)}")
        raise HTTPException(status_code=400, detail="‚ùå Arquivo JSON inv√°lido!")
    
    except Exception as e:
        logging.error(f"‚ùå Erro ao processar o upload: {str(e)}")
        raise HTTPException(status_code=500, detail="‚ùå Erro interno no servidor")
